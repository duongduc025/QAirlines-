const login = async (req, res) => {
    const { email, password } = req.body;   
    console.log("Login attempt for email:", email);
    try {
        const user = await User.findOne({ email });
        console.log("User found:", user);
        if (user) {
            const isMatch = await bcrypt.compare(password, user.password);
            if (isMatch) {
                const token = jwt.sign({ email: user.email, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
                console.log("Generated token:", token);
                console.log("JWT Secret for signing:", process.env.JWT_SECRET);
                console.log("Login successful");
                res.json({ token });
            } else {
                console.log("Incorrect password");
                res.status(400).json("The pass is incorrect");
            }
        } else {
            console.log("No record existed");
            res.status(404).json("No record existed");
        }
    } catch (err) {
        console.error("Error during login:", err);
        res.status(500).json("Error during login");
    }
};
import jwt from 'jsonwebtoken';

const authenticateJWT = (req, res, next) => {
    const authHeader = req.header('Authorization');
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        console.log("Access token is missing or invalid");
        return res.status(401).json({ message: 'Access token is missing or invalid' });
    }

    console.log("Token received:", token);
    console.log("JWT Secret for verification:", process.env.JWT_SECRET);

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            console.log("Invalid token:", err.message);
            return res.status(403).json({ message: 'Invalid token' });
        }
        req.user = user;
        next();
    });
};

export { authenticateJWT };

export const isAdmin = (req, res, next) => {
    const user = req.user; // Giả sử thông tin người dùng được lưu trong req.user
    if (user && user.role === 'admin') {
        next();
    } else {
        res.status(403).json({ message: 'Truy cập bị từ chối. Chỉ dành cho admin.' });
    }
};
import express from 'express';
import { showAllFlights, addNewFlight } from '../controllers/flights.controller.js';
import { isAdmin } from '../middlewares/auth.middleware.js';

const router = express.Router();

// ...existing code...

router.get('/allFlights', showAllFlights);
router.post('/addFlight', isAdmin, addNewFlight);

// ...existing code...

export default router;

export const addNewFlight = [
    authenticateJWT,
    isAdmin,        
    async (req, res) => {
        console.log("Authenticated user:", req.user);
        const { flight_id, airplane_id, ticket_price, departure_location, destination, travel_time, arrival_time, departure_time, estimated_arrival, economy_seats, business_seats, economy_price, business_price } = req.body;

        if (!flight_id || !airplane_id || !ticket_price || !departure_location || !destination || !travel_time || !arrival_time || !departure_time || !estimated_arrival || !economy_seats || !business_seats || !economy_price || !business_price) {
            return res.status(400).json({ message: "All fields are required" });
        }

        try {
            const newFlight = new Flight({
                flight_id,
                airplane_id,
                ticket_price,
                departure_location,
                destination,
                travel_time,
                arrival_time,
                departure_time,
                estimated_arrival,
                economy_seats,
                business_seats,
                economy_price,
                business_price
            });

            await newFlight.save();
            res.status(201).json(newFlight);
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    }
];

import express from 'express';
import { register, login, updateUser, changePassword, addUser } from '../controllers/user.controller.js';
import { validateUser, validateUpdateUser, validateChangePassword, validate } from '../validations/user.validation.js';
import { authenticateJWT } from '../middlewares/jwtAuth.js';
import { isAdmin } from '../middlewares/auth.middleware.js';

const router = express.Router();

router.post('/register', validateUser, validate, register);
router.post('/login', validate, login);
router.put('/update/:email', authenticateJWT, validateUpdateUser, validate, updateUser);
router.put('/change-password/:email', authenticateJWT, validateChangePassword, validate, changePassword);
router.post('/add-user', validateUser, validate, addUser);

export default router;
